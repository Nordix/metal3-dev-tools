#!/bin/bash

export OPENSTACK_DNS_NAMESERVERS=8.8.8.8
export OPENSTACK_FAILURE_DOMAIN=nova
export OPENSTACK_EXTERNAL_NETWORK_ID=""
export OPENSTACK_IMAGE_NAME="UBUNTU_20.04_NODE_IMAGE_K8S_v1.23.2"
export OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR=2C-4GB-100GB
export OPENSTACK_NODE_MACHINE_FLAVOR=2C-4GB-100GB


function setAuthKey {

    read -e -p "Enter a full path (e.g /home/ubuntu/.ssh/...) path to ssh authorized key to access capo instances:" OPENSTACK_SSH_AUTHORIZED_KEY_FILE
    echo $OPENSTACK_SSH_AUTHORIZED_KEY_FILE
    ssh-keygen -l -f "${OPENSTACK_SSH_AUTHORIZED_KEY_FILE}"

    if [[ $? == 0 ]]; then
        export OPENSTACK_SSH_AUTHORIZED_KEY="$(cat ${OPENSTACK_SSH_AUTHORIZED_KEY_FILE})"
    else
        echo "${OPENSTACK_SSH_AUTHORIZED_KEY_FILE} is not a valid public key"
        return 1
    fi
}

function setKeyName {

    read -e -p 'Enter the corresponding keypair in openstack cluster:' PROVIDED_OPENSTACK_SSH_KEY_NAME
    EXISTING_KEY=$(./run-openstack-command.sh openstack keypair show $PROVIDED_OPENSTACK_SSH_KEY_NAME -c name -f value | tr -d '\r')

    if [ "${EXISTING_KEY}" = "${PROVIDED_OPENSTACK_SSH_KEY_NAME}" ] ;then
        export OPENSTACK_SSH_KEY_NAME="${PROVIDED_OPENSTACK_SSH_KEY_NAME}"
    else
        echo "Unable to find they keypair ${PROVIDED_OPENSTACK_SSH_KEY_NAME} in openstack"
        echo "It must be a keypair in the OpenStack project visible with 'openstack keypair list'"
        return 1
    fi
    echo "End of setKeyName"
}

[ -n "${OPENSTACK_SSH_AUTHORIZED_KEY-}" ] || setAuthKey
[ -n "${OPENSTACK_SSH_KEY_NAME-}" ] || setKeyName
