
ci_git_url = "https://github.com/Nordix/metal3-dev-tools.git"
ci_git_credential_id = "nordix-metal3-ci-github-prod-token"
ci_git_branch = "main"

script {
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
}

pipeline {
  agent { label 'metal3-static-workers' }
  environment {
    METAL3_CI_USER="metal3ci"
    VM_KEY = "${VM_KEY}"
    RT_URL="https://artifactory.nordix.org/artifactory"
    OS_AUTH_URL="https://kna1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="CCP_Domain_37137"
    OS_REGION_NAME="Kna1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="Default Project 37137"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION=3
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    KUBERNETES_VERSION = "${KUBERNETES_VERSION}"
    CRICTL_VERSION = "${CRICTL_VERSION}"
    CRIO_VERSION="${CRIO_VERSION}"
    DOCKER_CMD_ENV="--env METAL3_CI_USER \
      --env METAL3_CI_USER_KEY=/data/id_ed25519_metal3ci \
      --env VM_KEY \
      --env RT_URL \
      --env RT_TOKEN \
      --env RT_USER \
      --env KUBERNETES_VERSION \
      --env CRICTL_VERSION \
      --env CRIO_VERSION \
      --env OS_AUTH_URL \
      --env OS_USER_DOMAIN_NAME \
      --env OS_PROJECT_DOMAIN_NAME \
      --env OS_REGION_NAME \
      --env OS_PROJECT_NAME \
      --env OS_TENANT_NAME \
      --env OS_AUTH_VERSION \
      --env OS_IDENTITY_API_VERSION \
      --env OS_USERNAME \
      --env OS_PASSWORD "
    CURRENT_DIR = sh (
                      script: 'readlink -f "."',
                      returnStdout: true
                     ).trim()
  }
  stages {
    stage('Building node images'){
      matrix {
        axes {
          axis {
            name 'IMAGE_OS'
            values 'Ubuntu', 'CentOS'
          }
        }
        options {
          timeout(time: 60, unit: 'MINUTES')
        }
        stages {
          stage('Building node image'){
            environment {
              TEST_EXECUTER_VM_NAME = "${TEST_EXECUTER_VM_NAME}-${IMAGE_OS}-based"
            }
            steps {
              echo "Building node image for ${IMAGE_OS}"
              withCredentials([
                usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
                sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY'),
                usernamePassword(credentialsId: 'infra-nordix-artifactory-api-key', usernameVariable: 'RT_USER', passwordVariable: 'RT_TOKEN')
              ]){
                catchError([stageResult: 'FAILURE', message: 'Failed to build the node Ubuntu image']) {
                  /* Generate node ubuntu image */
                  sh "docker run --rm \
                    ${DOCKER_CMD_ENV}\
                    -v ${CURRENT_DIR}:/data \
                    -v ${METAL3_CI_USER_KEY}:/data/id_ed25519_metal3ci \
                    registry.nordix.org/metal3/image-builder \
                    /data/ci/images/gen_metal3_${IMAGE_OS.toLowerCase()}_image.sh \
                    /data/id_ed25519_metal3ci 1 \
                    provision_node_image_${IMAGE_OS.toLowerCase()}.sh"
                }
              }
            }
          }
        }
      }
    }
  }
  post{
    success {
      echo 'Run metal3_openstack_image_building job'
      build job: 'metal3_openstack_image_building'
    }
  }
}
