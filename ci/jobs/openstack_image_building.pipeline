
ci_git_url = "https://github.com/Nordix/metal3-dev-tools.git"
ci_git_credential_id = "nordix-metal3-ci-github-prod-token"
ci_git_branch = "main"

script {
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
}

def os_auth_urls = [Frankfurt: "https://fra1.citycloud.com:5000", Karlskrona: "https://kna1.citycloud.com:5000"]
def os_region_names = [Frankfurt: "Fra1", Karlskrona: "Kna1"]

pipeline {
  agent { label 'metal3-static-workers' }
  options { ansiColor('xterm') }
  environment {
    METAL3_CI_USER="metal3ci"
    VM_KEY = "${VM_KEY}"
    RT_URL="https://artifactory.nordix.org/artifactory"
    OS_AUTH_URL="https://kna1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="CCP_Domain_37137"
    OS_REGION_NAME="Kna1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="Default Project 37137"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION=3
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    KUBERNETES_VERSION = "${KUBERNETES_VERSION}"
    KIND_NODE_IMAGE_VERSION = "${KIND_NODE_IMAGE_VERSION}"
    DOCKER_CMD_ENV="--env METAL3_CI_USER \
      --env METAL3_CI_USER_KEY=/data/id_ed25519_metal3ci \
      --env VM_KEY \
      --env RT_URL \
      --env KUBERNETES_VERSION \
      --env KIND_NODE_IMAGE_VERSION \
      --env OS_AUTH_URL \
      --env OS_USER_DOMAIN_NAME \
      --env OS_PROJECT_DOMAIN_NAME \
      --env OS_REGION_NAME \
      --env OS_PROJECT_NAME \
      --env OS_TENANT_NAME \
      --env OS_AUTH_VERSION \
      --env OS_IDENTITY_API_VERSION \
      --env OS_USERNAME \
      --env OS_PASSWORD "
    CURRENT_DIR = sh (
                      script: 'readlink -f "."',
                      returnStdout: true
                     ).trim()
  }
  stages {
    stage('SCM') {
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                branches: [[name: ci_git_branch]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'WipeWorkspace'],
                [$class: 'CleanCheckout'],
                [$class: 'CleanBeforeCheckout']],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                url: ci_git_url]]])
      }
    }
    stage('Build Ubuntu base image and Jenkins image') {
      matrix {
        axes {
          axis {
            name 'REGION'
            values 'Karlskrona', 'Frankfurt'
          }
        }
        environment {
          OS_AUTH_URL=os_auth_urls.get(env.REGION)
          OS_REGION_NAME=os_region_names.get(env.REGION)
        }
        options {
          timeout(time: 30, unit: 'MINUTES')
        }
        stages {
          stage('Building Ubuntu base image') {
            steps {
              echo 'Building Ubuntu base image for ${REGION} region'
              withCredentials([
                usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
                sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')
              ]) {
                catchError([stageResult: 'FAILURE', message: "Failed to build Ubuntu base image in ${REGION}"]) {
                  /* Generate base ubuntu image */
                  sh "docker run --rm \
                    ${DOCKER_CMD_ENV}\
                    -v ${CURRENT_DIR}:/data \
                    -v ${METAL3_CI_USER_KEY}=/data/id_ed25519_metal3ci \
                    registry.nordix.org/metal3/image-builder \
                    /data/ci/images/gen_base_ubuntu_image.sh \
                    /data/id_ed25519_metal3ci 1"
                }
              }
            }
          }
          stage('Building Jenkins image'){
            when {
              // We only run jenkins hosts in Karlskrona
              environment name: 'REGION', value: 'Karlskrona'
            }
            steps {
              echo 'Building Jenkins image for ${REGION} region'
              withCredentials([
                usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
                sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')
              ]) {
                catchError([stageResult: 'FAILURE', message: "Failed to build Ubuntu Jenkins image in ${REGION}"]) {
                  /* Generate Jumphost / Jenkins ubuntu image */
                  sh "docker run --rm \
                    ${DOCKER_CMD_ENV}\
                    -v ${CURRENT_DIR}:/data \
                    -v ${METAL3_CI_USER_KEY}=/data/id_ed25519_metal3ci \
                    registry.nordix.org/metal3/image-builder \
                    /data/ci/images/gen_jumphost_jenkins_ubuntu_image.sh \
                    /data/id_ed25519_metal3ci 1"
                }
              }
            }
          }
        }
      }
    }
    stage('Build Metal3 images') {
      matrix {
        axes {
          axis {
            name 'REGION'
            values 'Karlskrona', 'Frankfurt'
          }
          axis {
            name 'IMAGE_OS'
            values 'Ubuntu', 'CentOS'
          }
        }
        stages {
          stage('Building Metal3 images') {
            options {
              timeout(time: 90, unit: 'MINUTES')
            }
            environment {
              OS_AUTH_URL=os_auth_urls.get(env.REGION)
              OS_REGION_NAME=os_region_names.get(env.REGION)
              TEST_EXECUTER_VM_NAME = "${TEST_EXECUTER_VM_NAME}-${IMAGE_OS}-based"
            }
            steps {
              echo 'Building Metal3 ${IMAGE_OS} image for ${REGION} region'
              withCredentials([
                usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD'),
                sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')
              ]) {
                catchError([stageResult: 'FAILURE', message: "Failed to build the Metal3 ${IMAGE_OS} image for ${REGION} region"]) {
                  /* Generate Metal3 image */
                  sh "docker run --rm \
                    ${DOCKER_CMD_ENV}\
                    -v ${CURRENT_DIR}:/data \
                    -v ${METAL3_CI_USER_KEY}=/data/id_ed25519_metal3ci \
                    registry.nordix.org/metal3/image-builder \
                    /data/ci/images/gen_metal3_${IMAGE_OS.toLowerCase()}_image.sh \
                    /data/id_ed25519_metal3ci 1 \
                    provision_metal3_image_${IMAGE_OS.toLowerCase()}.sh"
                }
              }
            }
          }
        }
      }
    }
  }
}
