import java.text.SimpleDateFormat

ci_git_branch = "main"
ci_git_url = "https://github.com/metal3-io/project-infra.git"
ci_git_credential_id = "metal3-jenkins-github-token"

// 10 minutes
def CLEAN_TIMEOUT = 600
// 1 hour 30 minutes for integration test
def TIMEOUT = 5400

script {
  def rand = new Random()
  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
  VM_NAME = "ci-test-vm-" + dateFormat.format(date) + "-" + VM_KEY
  RAND_NAME = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
}

pipeline {
  agent { label 'metal3-static-workers' }
  options { ansiColor('xterm') }
  environment {
    METAL3_CI_USER="metal3ci"
    VM_KEY = "${VM_KEY}"
    RT_URL="https://artifactory.nordix.org/artifactory"
    OS_AUTH_URL="https://fra1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="CCP_Domain_37137"
    OS_REGION_NAME="Fra1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="Default Project 37137"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION=3
    REPO_ORG = "${PROJECT_REPO_ORG}"
    REPO_NAME = "${PROJECT_REPO_NAME}"
    UPDATED_REPO = "${ghprbAuthorRepoGitUrl}"
    REPO_BRANCH = "${ghprbTargetBranch}"
    UPDATED_BRANCH = "${ghprbActualCommit}"
    OS_USERNAME="metal3ci"
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${ghprbPullId}"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    IMAGE_OS = "${IMAGE_OS}"
    DEFAULT_HOSTS_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES="${NUM_NODES}"
    TESTS_FOR="${TESTS_FOR}"
    IMAGE_LOCATION="https://artifactory.nordix.org/artifactory/metal3/images/temp/"
    DST_FOLDER="metal3/images/temp"
    FINAL_IMAGE_NAME="${IMAGE_OS}_TEMP_IMG_${RAND_NAME}"
    KUBERNETES_VERSION="${KUBERNETES_VERSION ?: 'v1.23.5' }"

    DOCKER_CMD_ENV="--env METAL3_CI_USER \
      --env METAL3_CI_USER_KEY=/data/id_rsa_metal3ci \
      --env VM_KEY \
      --env RT_URL \
      --env RT_TOKEN \
      --env RT_USER \
      --env OS_AUTH_URL \
      --env OS_USER_DOMAIN_NAME \
      --env OS_PROJECT_DOMAIN_NAME \
      --env OS_REGION_NAME \
      --env OS_PROJECT_NAME \
      --env OS_TENANT_NAME \
      --env OS_AUTH_VERSION \
      --env OS_IDENTITY_API_VERSION \
      --env OS_USERNAME \
      --env OS_PASSWORD \
      --env DST_FOLDER \
      --env KUBERNETES_VERSION \
      --env FINAL_IMAGE_NAME"
    CURRENT_DIR = sh (
                      script: 'readlink -f "."',
                      returnStdout: true
                     ).trim()
  }
  stages {
    stage('Building node Ubuntu image'){
      when { expression {IMAGE_OS == 'ubuntu'}}
      options {
        timeout(time: 60, unit: 'MINUTES')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
          withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]) {
            withCredentials([usernamePassword(credentialsId: 'infra-nordix-artifactory-api-key', usernameVariable: 'RT_USER', passwordVariable: 'RT_TOKEN')]) {

            /* Generate node ubuntu image */
            sh "docker run --rm \
              ${DOCKER_CMD_ENV}\
              -v ${CURRENT_DIR}:/data \
              -v ${METAL3_CI_USER_KEY}:/data/id_rsa_metal3ci \
              registry.nordix.org/metal3/image-builder \
              /data/ci/images/gen_node_ubuntu_image.sh \
              /data/id_rsa_metal3ci 1"

            /* Delete image */
            sh """#!/bin/bash
              source <(curl -s https://raw.githubusercontent.com/Nordix/metal3-dev-tools/${UPDATED_BRANCH}/ci/scripts/openstack/utils.sh)
              delete_image "${FINAL_IMAGE_NAME}"
            """
            }
          }
        }
      }
    }
    stage('Building node CentOS image'){
      when { expression {IMAGE_OS == 'centos'}}
      options {
        timeout(time: 60, unit: 'MINUTES')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
          withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]) {
            withCredentials([usernamePassword(credentialsId: 'infra-nordix-artifactory-api-key', usernameVariable: 'RT_USER', passwordVariable: 'RT_TOKEN')]) {

            /* Generate node CentOS dev-env image */
            sh "docker run --rm \
              ${DOCKER_CMD_ENV}\
              -v ${CURRENT_DIR}:/data \
              -v ${METAL3_CI_USER_KEY}:/data/id_rsa_metal3ci \
              registry.nordix.org/metal3/image-builder \
              /data/ci/images/gen_metal3_centos_image.sh \
              /data/id_rsa_metal3ci 1 \
              provision_node_image_centos.sh"

            /* Delete image */
            sh """#!/bin/bash
              source <(curl -s https://raw.githubusercontent.com/Nordix/metal3-dev-tools/${UPDATED_BRANCH}/ci/scripts/openstack/utils.sh)
              delete_image "${FINAL_IMAGE_NAME}"
            """
            }
          }
        }
      }
    }
    stage('SCM integration'){
        options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                 branches: [[name: ci_git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout']],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                 url: ci_git_url]]])
        script {
          CURRENT_START_TIME = System.currentTimeMillis()
        }
      }
    }
    stage('Run integration test') {
      options {
        timeout(time: TIMEOUT, unit: 'SECONDS')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
          withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]) {
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              sh """  cat <<-EOF > "./jenkins/scripts/files/vars.sh"
                IMAGE_LOCATION="${IMAGE_LOCATION}"
                IMAGE_NAME="${FINAL_IMAGE_NAME}.qcow2"
                KUBERNETES_VERSION="${KUBERNETES_VERSION}"
EOF
                """
              sh "./jenkins/scripts/integration_test.sh"
            }
          }
        }
      }
      post {
        always {
          script {
            CURRENT_END_TIME = System.currentTimeMillis()
            if ((((CURRENT_END_TIME - CURRENT_START_TIME)/1000) - TIMEOUT) > 0) {
              echo "Failed due to timeout"
              currentBuild.result = 'FAILURE'
            }
          }
          withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
            withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
              sh "./jenkins/scripts/fetch_logs.sh"
            }
          }
          archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
        }
      }
    }
  }
  post {
    always {
      withCredentials([usernamePassword(credentialsId: 'infra-nordix-artifactory-api-key', usernameVariable: 'RT_USER', passwordVariable: 'RT_TOKEN')]) {

          /* Delete temporary image from artifactory */
          sh """#!/bin/bash
          source <(curl -s https://raw.githubusercontent.com/Nordix/metal3-dev-tools/${UPDATED_BRANCH}/ci/scripts/artifactory/utils.sh)
          rt_delete_artifact "${DST_FOLDER}/${FINAL_IMAGE_NAME}.qcow2" "0"
          """
      }
    }
    success {
      withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
          sh "./jenkins/scripts/integration_test_clean.sh"
        }
      }
    }
    cleanup {
      withCredentials([usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
          sh "./jenkins/scripts/integration_delete.sh"
        }
      }
    }
  }
}
