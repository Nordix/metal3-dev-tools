ci_git_url = "https://github.com/Nordix/metal3-dev-tools.git"
ci_git_branch = "master"
ci_git_credential_id = "nordix-metal3-ci-github-prod-token"


git_url = "https://github.com/${PROJECT_REPO_ORG}/${PROJECT_REPO_NAME}.git"
git_branch = "${ghprbActualCommit}"
git_credential_id = "nordix-metal3-ci-github-prod-token"

pipeline {
  agent { label 'metal3-static-workers' }
  environment {
    build_ok = true
    CURRENT_DIR = sh (
                      script: 'pwd',
                      returnStdout: true
                     ).trim()
  }
  stages {
    stage('SCM') {
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                 branches: [[name: ci_git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout']],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                 url: ci_git_url]]])

        /* Checkout Target Repo in subdirectory */
        checkout([$class: 'GitSCM',
                 branches: [[name: git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout'],
                 [$class: 'RelativeTargetDirectory', relativeTargetDir: PROJECT_REPO_NAME]],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: git_credential_id,
                 url: git_url]]])
      }
    }

    /* TODO: Remove Building when containers are available in registry  */
    stage('Build Linter containers') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      steps {

        sh 'sudo apt install -y make'
        sh 'make build-lint-md'
        sh 'make build-lint-go'
      }
    }

   /* Run Linters */
   /* =========== */

    stage('Lint MD') {
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        script {
          try{
            sh "make lint-md lint_folder=${CURRENT_DIR}/${PROJECT_REPO_NAME}"
          }   catch(e) {
            build_ok = false
            echo e.toString()
          }
        }
      }
    }
    stage('Lint Go') {
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        script {
          try{
            sh "make lint-go lint_folder=${CURRENT_DIR}/${PROJECT_REPO_NAME}"
          }   catch(e) {
            build_ok = false
            echo e.toString()
          }
        }
      }
    }
    stage('Lint Shell') {
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        script {
          try {
            sh "make lint-shell lint_folder=${CURRENT_DIR}/${PROJECT_REPO_NAME}"
          }   catch(e) {
            build_ok = false
            echo e.toString()
          }
          if(build_ok) {
            currentBuild.result = "SUCCESS"
          } else {
            currentBuild.result = "FAILURE"
          }
        }
      }
    }
  }
}
